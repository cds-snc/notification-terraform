name: "Merge to main (Production)"

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/infrastructure_version.txt"

defaults:
  run:
    shell: bash

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  TERRAFORM_VERSION: 0.14.4
  TERRAGRUNT_VERSION: 0.35.13
  TF_VAR_heartbeat_api_key: ${{ secrets.PRODUCTION_HEARTBEAT_API_KEY }}
  TF_VAR_heartbeat_base_url: ${{ secrets.PRODUCTION_HEARTBEAT_BASE_URL }}
  TF_VAR_heartbeat_template_id: ${{ secrets.PRODUCTION_HEARTBEAT_TEMPLATE_ID }}
  TF_VAR_rds_cluster_password: ${{ secrets.PRODUCTION_RDS_CLUSTER_PASSWORD }}
  TF_VAR_cloudwatch_slack_webhook_warning_topic: ${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_cloudwatch_slack_webhook_critical_topic: ${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_cloudwatch_slack_webhook_general_topic: ${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_slack_channel_warning_topic: "notification-ops"
  TF_VAR_slack_channel_critical_topic: "notification-ops"
  TF_VAR_slack_channel_general_topic: "notification-ops"
  TF_VAR_cloudwatch_opsgenie_alarm_webhook: ${{ secrets.PRODUCTION_CLOUDWATCH_OPSGENIE_ALARM_WEBHOOK }}
  TF_VAR_admin_client_secret: ${{ secrets.PRODUCTION_ADMIN_CLIENT_SECRET }}
  TF_VAR_auth_tokens: ${{ secrets.PRODUCTION_AUTH_TOKENS }}
  TF_VAR_dangerous_salt: ${{ secrets.PRODUCTION_DANGEROUS_SALT }}
  TF_VAR_mlwr_host: False
  TF_VAR_redis_url: ${{ secrets.PRODUCTION_REDIS_URL }}
  TF_VAR_secret_key: ${{ secrets.PRODUCTION_SECRET_KEY }}
  TF_VAR_sqlalchemy_database_reader_uri: ${{ secrets.PRODUCTION_SQLALCHEMY_DATABASE_READER_URI }}
  TF_VAR_sqlalchemy_database_uri: ${{ secrets.PRODUCTION_SQLALCHEMY_DATABASE_URI }}
  TF_VAR_document_download_api_host: ${{ secrets.PRODUCTION_DOCUMENT_DOWNLOAD_API_HOST }}
  TF_VAR_api_lambda_domain_name: ${{ secrets.PRODUCTION_API_LAMBDA_DOMAIN_NAME }}

jobs:
  terraform-apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Infrastructure Version
        # Set the GitHub tag within .github/workflows/infrastructure_version.txt to update the infrastructure
        # to a new version in production
        # See https://github.com/cds-snc/notification-terraform/releases
        run: |
          INFRASTRUCTURE_VERSION=`cat ./.github/workflows/infrastructure_version.txt`
          echo "INFRASTRUCTURE_VERSION=$INFRASTRUCTURE_VERSION" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/terragrunt
          echo "bin" >> $GITHUB_PATH

      - name: Get changed files
        id: changed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'

      - name: Get touched Terragrunt configurations
        run: |
          CONFIGS=`echo '${{ steps.changed-files.outputs.added_modified }}' | jq -c '[.[] | match("(.*env?)\/(.*production?)\/(.*)\/").captures[2].string] | unique | select(length > 0)'`
          echo "CONFIGS=$CONFIGS" >> $GITHUB_ENV

      - name: Inject token authentication
        run: |
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Apply aws/common
        run: |
          cd env/production/common
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/dns
        run: |
          cd env/production/dns
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/cloudfront
        run: |
          cd env/production/cloudfront
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/eks
        run: |
          cd env/production/eks
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/elasticache
        run: |
          cd env/production/elasticache
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/rds
        run: |
          cd env/production/rds
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/lambda-api
        run: |
          cd env/production/lambda-api
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/heartbeat
        run: |
          cd env/production/heartbeat
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve
