name: Terragrunt Plan Matrix

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'env/**'
      - 'aws/**'
      - '.github/workflows/terragrunt-plan-matrix.yml'
  workflow_dispatch:

env:
  AWS_REGION: ca-central-1
  TF_VERSION: 1.5.7
  TERRAGRUNT_VERSION: 0.50.17

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            env/**
            aws/**

      - name: Set matrix based on changes
        id: set-matrix
        run: |
          # Define all possible directories to check
          ALL_DIRS='[
            "env/dev",
            "env/staging", 
            "env/production",
            "env/sandbox"
          ]'
          
          # If specific files changed, we could filter the matrix here
          # For now, run all environments when changes are detected
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "matrix=$ALL_DIRS" >> $GITHUB_OUTPUT
          else
            echo "matrix=[]" >> $GITHUB_OUTPUT
          fi

  terragrunt-plan:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    env:
      WORKING_DIR: ${{ matrix.directory }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Cache Terragrunt modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terragrunt-cache
            .terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ hashFiles('**/terragrunt.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-

      - name: Install 1Pass CLI and Download TFVars
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb
          sudo mkdir -p aws && cd aws
          op read op://4eyyuwddp6w4vxlabrr2i2duxm/"TERRAFORM_SECRETS_${{env.ENVIRONMENT}}"/notesPlain > ${{env.ENVIRONMENT}}.tfvars         

      - name: Terragrunt Init
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terragrunt init --terragrunt-non-interactive

      - name: Terragrunt Plan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terragrunt plan --terragrunt-non-interactive -out=tfplan

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: terragrunt-plan-${{ matrix.directory }}-${{ github.run_number }}
          path: |
            ${{ env.WORKING_DIR }}/tfplan
            ${{ env.WORKING_DIR }}/.terragrunt-cache
          retention-days: 7

  plan-summary:
    needs: [detect-changes, terragrunt-plan]
    if: always() && needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Plan Summary
        run: |
          echo "## Terragrunt Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # This would need to be enhanced to actually check job statuses
          # For now, just list the directories that were planned
          MATRIX='${{ needs.detect-changes.outputs.matrix }}'
          echo "$MATRIX" | jq -r '.[] | "| \(.) | âœ… Planned |"' >> $GITHUB_STEP_SUMMARY