name: "Terragrunt plan STAGING"

env:
  ENVIRONMENT: staging
  ACCOUNT_ID: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STAGING }}
  TERRAFORM_VERSION: 1.11.4
  TERRAGRUNT_VERSION: 0.77.22
  WORKFLOW: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".env"
      - "aws/**"
      - "env/$ENVIRONMENT/**"
      - "env/terragrunt.hcl"
      - "env/*.tfvars"
      - ".github/workflows/terragrunt_plan_$ENVIRONMENT.yml"

permissions:
  id-token: write # This is required for requesting the OIDC JWT
  contents: write # This is required for actions/checkout
  pull-requests: write

jobs:
  terragrunt-run-all-plan:
    runs-on: ubuntu-latest
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      
      - uses: ./.github/actions/setup-terraform
        with:
          role_to_assume: arn:aws:iam::${{env.ACCOUNT_ID}}:role/notification-terraform-plan
          role_session_name: NotifyTerraformPlan
      
      - name: Install 1Pass CLI and Download TFVars
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb
          sudo mkdir -p aws && cd aws
          op read op://4eyyuwddp6w4vxlabrr2i2duxm/"TERRAFORM_SECRETS_${{env.ENVIRONMENT}}"/notesPlain > ${{env.ENVIRONMENT}}.tfvars
      
      - name: Terragrunt Run All Plan
        id: plan
        working-directory: env/${{env.ENVIRONMENT}}
        run: |
          set +e  # Don't exit on error so we can capture output
          
          # Run terragrunt plan on all modules except quicksight and aws-auth
          terragrunt run-all plan \
            --terragrunt-exclude-dir quicksight \
            --terragrunt-exclude-dir aws-auth \
            --terragrunt-non-interactive \
            --terragrunt-parallelism 20 2>&1 | tee plan_output.txt
          
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          # Debug: Check if file exists and show size
          echo "Plan output file size: $(wc -c < plan_output.txt) bytes"
          echo "Plan output file lines: $(wc -l < plan_output.txt) lines"
          
          # Set exit code as output for the comment step
          echo "exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          exit $PLAN_EXIT_CODE
          
      - name: Upload plan output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: plan-output
          path: env/${{env.ENVIRONMENT}}/plan_output.txt
          retention-days: 1

  comment-pr:
    needs: terragrunt-run-all-plan
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Download plan output
        uses: actions/download-artifact@v4
        with:
          name: plan-output
          path: ./
          
      - name: Parse and Comment Plan Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the plan output from artifact
            let planOutput = '';
            let exitCode = '${{ needs.terragrunt-run-all-plan.outputs.exitcode }}';
            
            try {
              planOutput = fs.readFileSync('plan_output.txt', 'utf8');
              console.log(`Read plan output: ${planOutput.length} characters`);
            } catch (error) {
              console.log('Could not read plan output file:', error.message);
              planOutput = 'Error: Could not read plan output';
            }
            
            // Strip ANSI color codes and clean up the output
            function stripAnsiCodes(text) {
              // Remove ANSI escape sequences
              return text.replace(/\x1b\[[0-9;]*m/g, '')
                        .replace(/\x1b\[[0-9;]*[a-zA-Z]/g, '')
                        // Remove other common escape sequences
                        .replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '')
                        // Clean up extra whitespace
                        .replace(/\r\n/g, '\n')
                        .replace(/\r/g, '\n');
            }
            
            // Check if module has actual changes
            function hasChanges(moduleOutput) {
              const output = moduleOutput.toLowerCase();
              return output.includes('plan:') || 
                     output.includes('to add') || 
                     output.includes('to change') || 
                     output.includes('to destroy') ||
                     output.includes('will be created') ||
                     output.includes('will be updated') ||
                     output.includes('will be destroyed') ||
                     output.includes('must be replaced') ||
                     /^\s*[+\-~#]/.test(moduleOutput); // terraform diff markers
            }
            
            // Clean up individual lines
            function cleanLine(line) {
              return line
                // Remove timestamps like "14:48:07.039"
                .replace(/^\d{2}:\d{2}:\d{2}\.\d{3}\s+/, '')
                // Remove "STDOUT" markers
                .replace(/STDOUT\s+/, '')
                // Remove module brackets from individual lines (we'll handle module grouping separately)
                .replace(/\[[^\]]+\]\s+/, '')
                // Remove "terraform:" prefixes
                .replace(/terraform:\s+/, '')
                // Clean up extra spaces
                .replace(/\s+/g, ' ')
                .trim();
            }
            
            planOutput = stripAnsiCodes(planOutput);
            
            // Create summary comment first
            const summaryOutput = `#### 🏗️ Terragrunt Plan Summary for ${{env.ENVIRONMENT}}
            
            *Plan exit code: ${exitCode}*
            *Action: \`${{ github.event_name }}\`*
            *Total output size: ${planOutput.length} characters*
            
            📋 Individual module plans are posted as separate comments below.`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summaryOutput
            });
            
            // Parse by looking for module-specific output sections
            const lines = planOutput.split('\n');
            const modules = new Map();
            let currentModule = '';
            let currentModuleLines = [];
            
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              
              // Skip terragrunt warnings
              if (line.includes('WARN') && line.includes('terragrunt')) {
                continue;
              }
              
              // Look for module indicators in the log output
              // Pattern: "[module-name] terraform: ..." or "STDOUT [module-name]"
              let moduleMatch = null;
              
              if (line.includes('[') && line.includes(']')) {
                // Extract module name from [module-name] pattern
                const bracketMatch = line.match(/\[([^\]]+)\]/);
                if (bracketMatch) {
                  const moduleName = bracketMatch[1];
                  // Skip non-module brackets like timestamps
                  if (!moduleName.includes(':') && !moduleName.includes('.') && moduleName !== 'STDOUT') {
                    moduleMatch = moduleName;
                  }
                }
              }
              
              if (moduleMatch) {
                // Save previous module if exists and has content
                if (currentModule && currentModuleLines.length > 0) {
                  // Combine all lines for this module
                  const moduleContent = currentModuleLines.map(cleanLine).filter(line => line.length > 0).join('\n');
                  if (moduleContent.trim().length > 0) {
                    modules.set(currentModule, moduleContent);
                  }
                }
                
                currentModule = moduleMatch;
                currentModuleLines = [line];
                console.log(`Found module: ${currentModule}`);
              } else if (currentModule) {
                // Add all lines for the current module
                currentModuleLines.push(line);
              }
            }
            
            // Save the last module
            if (currentModule && currentModuleLines.length > 0) {
              const moduleContent = currentModuleLines.map(cleanLine).filter(line => line.length > 0).join('\n');
              if (moduleContent.trim().length > 0) {
                modules.set(currentModule, moduleContent);
              }
            }
            
            console.log(`Found ${modules.size} modules: ${Array.from(modules.keys()).join(', ')}`);
            
            // If no modules found, try to split by terraform plan sections
            if (modules.size === 0) {
              console.log('No modules found with bracket parsing, trying plan section approach...');
              
              // Look for terraform plan output sections
              const planSections = planOutput.split(/(?=Terraform used the selected providers|Terraform will perform the following actions|Plan: \d+|No changes\. Your infrastructure)/);
              
              let sectionIndex = 1;
              for (const section of planSections) {
                if (section.trim().length > 200) { // Only include substantial sections
                  // Try to find module hints in the section
                  let moduleName = `section-${sectionIndex}`;
                  
                  // Look for resource patterns to identify module
                  const resourceMatches = section.match(/resource "([^"]+)"/g);
                  if (resourceMatches && resourceMatches.length > 0) {
                    const resourceTypes = [...new Set(resourceMatches.map(r => r.match(/resource "([^"]+)"/)[1].split('_')[0]))];
                    moduleName = resourceTypes.slice(0, 2).join('-');
                  }
                  
                  modules.set(moduleName, section);
                  sectionIndex++;
                }
              }
            }
            
            // If still no modules, create combined output
            if (modules.size === 0) {
              console.log('Creating single combined output section');
              const cleanOutput = planOutput
                .split('\n')
                .filter(line => line.trim().length > 0)
                .filter(line => !line.includes('WARN'))
                .join('\n');
                
              if (cleanOutput.length > 0) {
                modules.set('combined-plan', cleanOutput);
              }
            }
            
            console.log(`Final modules: ${Array.from(modules.keys()).join(', ')}`);
            
            // Post module comments (only for modules with changes)
            let moduleCount = 0;
            let skippedCount = 0;
            const maxCommentSize = 60000;
            
            for (const [moduleName, output] of modules) {
              let moduleOutput = output.trim();
              
              // Check if this module has actual changes
              if (!hasChanges(moduleOutput)) {
                console.log(`Skipping module ${moduleName} - no changes detected`);
                skippedCount++;
                continue;
              }
              
              // Further clean up the output
              moduleOutput = moduleOutput
                .split('\n')
                .filter(line => line.trim().length > 0)
                .join('\n');
              
              if (moduleOutput.length > maxCommentSize) {
                moduleOutput = moduleOutput.substring(0, maxCommentSize - 500) + '\n\n... (output truncated due to size)';
              }
              
              const moduleComment = `#### 📦 Module: \`${moduleName}\` (Changes Detected)
              
              \`\`\`terraform
              ${moduleOutput}
              \`\`\``;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: moduleComment
              });
              
              moduleCount++;
              await new Promise(resolve => setTimeout(resolve, 100));
            }
            
            console.log(`Created ${moduleCount} module comments, skipped ${skippedCount} modules with no changes`);