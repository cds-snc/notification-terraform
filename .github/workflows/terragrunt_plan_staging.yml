name: "Terragrunt plan STAGING"

env:
  ENVIRONMENT: staging
  ACCOUNT_ID: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STAGING }}
  TF_VERSION: 1.5.7
  TERRAGRUNT_VERSION: 0.50.17
  WORKFLOW: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".env"
      - "aws/**"
      - "env/$ENVIRONMENT/**"
      - "env/terragrunt.hcl"
      - "env/*.tfvars"
      - ".github/workflows/terragrunt_plan_$ENVIRONMENT.yml"

permissions:
  id-token: write # This is required for requesting the OIDC JWT
  contents: write # This is required for actions/checkout
  pull-requests: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            env/staging/**
            env/staging_config.tfvars
            aws/**

      - name: Set matrix based on changes
        id: set-matrix
        run: |
          # Get the list of changed files
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          
          # Initialize empty array for staging directories
          STAGING_DIRS=()
          
          echo "Any changed: ${{ steps.changed-files.outputs.any_changed }}"
          echo "Changed files: $CHANGED_FILES"
          
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "Processing changed files..."
            
            # Check if staging_config.tfvars changed - if so, plan ALL staging modules
            if echo "$CHANGED_FILES" | grep -q "env/staging_config.tfvars"; then
              echo "staging_config.tfvars changed - planning all staging modules"
              # Find all directories in env/staging/
              for dir in env/staging/*/; do
                if [ -d "$dir" ]; then
                  # Remove trailing slash and add to array
                  module_dir=$(echo $dir | sed 's:/*$::')
                  echo "Found staging module: $module_dir"
                  STAGING_DIRS+=("$module_dir")
                fi
              done
            else
              echo "Checking individual file changes..."
              # Extract unique module directories from changed files
              for file in $CHANGED_FILES; do
                echo "Processing file: $file"
                if [[ $file == aws/* ]]; then
                  # Extract module name from aws/ path (e.g., aws/eks/file.tf -> eks)
                  module=$(echo $file | cut -d'/' -f2)
                  staging_dir="env/staging/$module"
                  echo "Checking if $staging_dir exists..."
                  # Check if this staging directory actually exists
                  if [ -d "$staging_dir" ]; then
                    echo "Adding $staging_dir to plan list"
                    STAGING_DIRS+=("$staging_dir")
                  else
                    echo "Directory $staging_dir does not exist"
                  fi
                elif [[ $file == env/staging/* ]]; then
                  # Extract module name from env/staging/ path (e.g., env/staging/eks/file.tf -> eks)
                  module=$(echo $file | cut -d'/' -f3)
                  if [ ! -z "$module" ]; then
                    staging_dir="env/staging/$module"
                    echo "Adding staging module: $staging_dir"
                    STAGING_DIRS+=("$staging_dir")
                  fi
                fi
              done
            fi
            
            echo "All staging dirs found: ${STAGING_DIRS[@]}"
            
            # Remove duplicates and convert to JSON array
            UNIQUE_DIRS=($(printf "%s\n" "${STAGING_DIRS[@]}" | sort -u))
            
            echo "Unique dirs: ${UNIQUE_DIRS[@]}"
            echo "Number of unique dirs: ${#UNIQUE_DIRS[@]}"
            
            if [ ${#UNIQUE_DIRS[@]} -eq 0 ]; then
              echo "No valid directories found, setting empty matrix"
              echo "matrix=[]" >> $GITHUB_OUTPUT
            else
              # Convert bash array to JSON
              printf -v MATRIX_JSON '"%s",' "${UNIQUE_DIRS[@]}"
              MATRIX_JSON="[${MATRIX_JSON%,}]"
              echo "Final matrix: $MATRIX_JSON"
              echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
              echo "Planning for directories: ${UNIQUE_DIRS[@]}"
            fi
          else
            echo "No files changed, setting empty matrix"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          fi

  terragrunt-plan:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    env:
      WORKING_DIR: ${{ matrix.directory }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ACCOUNT_ID}}:role/notification-terraform-plan
          role-session-name: NotifyTerraformPlan
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Cache Terragrunt modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.terragrunt-cache
            .terragrunt-cache
          key: ${{ runner.os }}-terragrunt-${{ hashFiles('**/terragrunt.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terragrunt-

      - name: Install 1Pass CLI and Download TFVars
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb
          sudo mkdir -p aws && cd aws
          op read op://4eyyuwddp6w4vxlabrr2i2duxm/"TERRAFORM_SECRETS_${{env.ENVIRONMENT}}"/notesPlain > ${{env.ENVIRONMENT}}.tfvars         

      - name: Terragrunt Init
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terragrunt init --terragrunt-non-interactive

      - name: Terragrunt Plan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terragrunt plan --terragrunt-non-interactive -out=tfplan

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terragrunt-plan-${{ matrix.directory }}-${{ github.run_number }}
          path: |
            ${{ env.WORKING_DIR }}/tfplan
            ${{ env.WORKING_DIR }}/.terragrunt-cache
          retention-days: 7

  plan-summary:
    needs: [detect-changes, terragrunt-plan]
    if: always() && needs.detect-changes.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    steps:
      - name: Plan Summary
        run: |
          echo "## Terragrunt Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # This would need to be enhanced to actually check job statuses
          # For now, just list the directories that were planned
          MATRIX='${{ needs.detect-changes.outputs.matrix }}'
          echo "$MATRIX" | jq -r '.[] | "| \(.) | âœ… Planned |"' >> $GITHUB_STEP_SUMMARY