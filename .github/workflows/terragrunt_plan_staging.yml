name: "Terragrunt plan STAGING"

env:
  ENVIRONMENT: staging
  ACCOUNT_ID: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN_STAGING }}
  TERRAFORM_VERSION: 1.11.4
  TERRAGRUNT_VERSION: 0.77.22
  WORKFLOW: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".env"
      - "aws/**"
      - "env/$ENVIRONMENT/**"
      - "env/terragrunt.hcl"
      - "env/*.tfvars"
      - ".github/workflows/terragrunt_plan_$ENVIRONMENT.yml"

permissions:
  id-token: write # This is required for requesting the OIDC JWT
  contents: write # This is required for actions/checkout
  pull-requests: write

jobs:
  terragrunt-run-all-plan:
    runs-on: ubuntu-latest
    outputs:
      plan-output: ${{ steps.plan.outputs.stdout }}
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      
      - uses: ./.github/actions/setup-terraform
        with:
          role_to_assume: arn:aws:iam::${{env.ACCOUNT_ID}}:role/notification-terraform-plan
          role_session_name: NotifyTerraformPlan
      
      - name: Install 1Pass CLI and Download TFVars
        run: |
          curl -o 1pass.deb https://downloads.1password.com/linux/debian/amd64/stable/1password-cli-amd64-latest.deb
          sudo dpkg -i 1pass.deb
          sudo mkdir -p aws && cd aws
          op read op://4eyyuwddp6w4vxlabrr2i2duxm/"TERRAFORM_SECRETS_${{env.ENVIRONMENT}}"/notesPlain > ${{env.ENVIRONMENT}}.tfvars
      
      - name: Terragrunt Run All Plan
        id: plan
        working-directory: env/${{env.ENVIRONMENT}}
        run: |
          set +e  # Don't exit on error so we can capture output
          
          # Run terragrunt plan on all modules except quicksight and aws-auth
          terragrunt run-all plan \
            --terragrunt-exclude-dir quicksight \
            --terragrunt-exclude-dir aws-auth \
            --terragrunt-non-interactive \
            --terragrunt-parallelism 20 2>&1 | tee plan_output.txt
          
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          # Debug: Check if file exists and show size
          echo "Plan output file size: $(wc -c < plan_output.txt) bytes"
          echo "Plan output file lines: $(wc -l < plan_output.txt) lines"
          
          # Set outputs for the comment step
          echo "exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Store the plan output (truncate if too long for GitHub)
          if [ -s plan_output.txt ]; then
            PLAN_OUTPUT=$(cat plan_output.txt | tail -c 50000)  # Last 50KB
            echo "stdout<<EOF" >> $GITHUB_OUTPUT
            echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "stdout=No plan output captured" >> $GITHUB_OUTPUT
          fi
          
          exit $PLAN_EXIT_CODE

  comment-pr:
    needs: terragrunt-run-all-plan
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR with Plan Results
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üèóÔ∏è Terragrunt Plan Results for ${{env.ENVIRONMENT}}
            \`\`\`terraform
            ${{ needs.terragrunt-run-all-plan.outputs.plan-output }}
            \`\`\`
            
            *Plan exit code: ${{ needs.terragrunt-run-all-plan.outputs.plan-exitcode }}*
            *Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });