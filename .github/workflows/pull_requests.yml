name: "Pull requests"

on:
  pull_request:
    paths:
      - "aws/**"
      - "env/staging/**"
      - ".github/workflows/*"

defaults:
  run:
    shell: bash

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  TERRAFORM_VERSION: 0.14.4
  TERRAGRUNT_VERSION: v0.26.0
  TARGET_ENV_PATH: staging
  TF_VAR_rds_cluster_password: fake_password_for_plan_123456
  TF_VAR_cloudwatch_slack_webhook: "https://example.com/slack/webhook"

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get changed files
        id: changed-files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'json'

      - name: Get touched GitHub Actions configurations
        run: |
          WORKFLOWS=`echo '${{ steps.changed-files.outputs.added_modified }}' | jq -c '[.[] | match("(.*github?)\/(.*workflows?)\/(.*)").captures[2].string] | unique | select(length > 0)'`
          echo "WORKFLOWS=WORKFLOWS" >> $GITHUB_ENV

      - name: Get touched Terragrunt configurations
        run: |
          IS_PRODUCTION=`echo '${{ steps.changed-files.outputs.added_modified }}' | jq -c '[.[] | match("(.*env?)\/(.*)\/(.*)\/").captures[1].string] | unique | select(length > 0)'`
          echo "IS_PRODUCTION=IS_PRODUCTION" >> $GITHUB_ENV

      - name: Determine Merge To Production
        if: contains(env.WORKFLOWS, 'merge_to_main_production') || contains(env.WORKFLOWS, 'infrastructure_version') || contains(env.IS_PRODUCTION, 'production')
        run: |
          echo "TARGET_ENV_PATH=production" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_rds_cluster_password=${{ secrets.PRODUCTION_RDS_CLUSTER_PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_cloudwatch_slack_webhook_warning_topic=${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}" >> $GITHUB_ENV
          echo "TF_VAR_cloudwatch_slack_webhook_critical_topic=${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}" >> $GITHUB_ENV
          echo "TF_VAR_cloudwatch_slack_webhook_general_topic=${{ secrets.PRODUCTION_CLOUDWATCH_SLACK_WEBHOOK }}" >> $GITHUB_ENV
          echo "TF_VAR_slack_channel_warning_topic=notification-ops" >> $GITHUB_ENV
          echo "TF_VAR_slack_channel_critical_topic=notification-ops" >> $GITHUB_ENV
          echo "TF_VAR_slack_channel_general_topic=notification-ops" >> $GITHUB_ENV
          echo "TF_VAR_cloudwatch_opsgenie_alarm_webhook=${{ secrets.PRODUCTION_CLOUDWATCH_OPSGENIE_ALARM_WEBHOOK }}" >> $GITHUB_ENV
          INFRASTRUCTURE_VERSION=`cat ./.github/workflows/infrastructure_version.txt`
          echo "INFRASTRUCTURE_VERSION=$INFRASTRUCTURE_VERSION" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/terragrunt
          echo "bin" >> $GITHUB_PATH

      - name: Plan aws/common
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/common
          ../../../bin/terragrunt plan --terragrunt-non-interactive

      - name: Plan aws/dns
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/dns
          ../../../bin/terragrunt plan --terragrunt-non-interactive

      - name: Plan aws/eks
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/eks
          ../../../bin/terragrunt plan --terragrunt-non-interactive

      - name: Plan aws/elasticache
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/elasticache
          ../../../bin/terragrunt plan --terragrunt-non-interactive

      - name: Plan aws/rds
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/rds
          ../../../bin/terragrunt plan --terragrunt-non-interactive

      - name: Plan aws/cloudfront
        run: |
          cd env/${{env.TARGET_ENV_PATH}}/cloudfront
          ../../../bin/terragrunt plan --terragrunt-non-interactive
