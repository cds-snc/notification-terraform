name: "Merge to main (Staging)"

on:
  # This will be used to dispatch this workflow from the manifest repo when environment variables change
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".env"     
      - "aws/**"
      - "env/staging/**"
      - ".github/workflows/merge_to_main_staging.yml"

defaults:
  run:
    shell: bash

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ca-central-1
  TF_VAR_heartbeat_api_key: ${{ secrets.STAGING_HEARTBEAT_API_KEY }}
  TF_VAR_heartbeat_base_url: ${{ secrets.STAGING_HEARTBEAT_BASE_URL }}
  TF_VAR_heartbeat_template_id: ${{ secrets.STAGING_HEARTBEAT_TEMPLATE_ID }}
  TF_VAR_rds_cluster_password: ${{ secrets.STAGING_RDS_CLUSTER_PASSWORD }}
  TF_VAR_cloudwatch_slack_webhook_warning_topic: ${{ secrets.STAGING_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_cloudwatch_slack_webhook_critical_topic: ${{ secrets.STAGING_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_cloudwatch_slack_webhook_general_topic: ${{ secrets.STAGING_CLOUDWATCH_SLACK_WEBHOOK }}
  TF_VAR_slack_channel_warning_topic: "notification-staging-ops"
  TF_VAR_slack_channel_critical_topic: "notification-staging-ops"
  TF_VAR_slack_channel_general_topic: "notification-staging-ops"
  TF_VAR_cloudwatch_opsgenie_alarm_webhook: ""
  TF_VAR_admin_client_secret: ${{ secrets.STAGING_ADMIN_CLIENT_SECRET }}
  TF_VAR_auth_tokens: ${{ secrets.STAGING_AUTH_TOKENS }}
  TF_VAR_dangerous_salt: ${{ secrets.STAGING_DANGEROUS_SALT }}
  TF_VAR_mlwr_host: False
  TF_VAR_redis_url: ${{ secrets.STAGING_REDIS_URL }}
  TF_VAR_secret_key: ${{ secrets.STAGING_SECRET_KEY }}
  TF_VAR_sqlalchemy_database_reader_uri: ${{ secrets.STAGING_SQLALCHEMY_DATABASE_READER_URI }}
  TF_VAR_sqlalchemy_database_uri: ${{ secrets.STAGING_SQLALCHEMY_DATABASE_URI }}
  TF_VAR_document_download_api_host: ${{ secrets.STAGING_DOCUMENT_DOWNLOAD_API_HOST }}
  TF_VAR_api_domain_name: ${{ secrets.STAGING_API_DOMAIN_NAME }}
  TF_VAR_api_lambda_domain_name: ${{ secrets.STAGING_API_LAMBDA_DOMAIN_NAME }}
  TF_VAR_new_relic_license_key: ${{ secrets.STAGING_NEW_RELIC_LICENSE_KEY }}
  TF_VAR_perf_test_phone_number: ${{ secrets.PERF_TEST_PHONE_NUMBER }}
  TF_VAR_perf_test_email: ${{ secrets.PERF_TEST_EMAIL }}
  TF_VAR_perf_test_domain: ${{ secrets.PERF_TEST_DOMAIN }}
  TF_VAR_perf_test_auth_header: ${{ secrets.PERF_TEST_AUTH_HEADER }}
  # Prevents repeated creation of the Slack lambdas if already existing.
  # See: https://github.com/terraform-aws-modules/terraform-aws-notify-slack/issues/84
  TF_RECREATE_MISSING_LAMBDA_PACKAGE: false

jobs:
  terraform-apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0

      - name: Set environment variables
        uses: ./.github/actions/setvars
        with:
          envVarFile: ./.env

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/terragrunt
          echo "bin" >> $GITHUB_PATH

      - name: Apply aws/common
        run: |
          cd env/staging/common
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/dns
        run: |
          cd env/staging/dns
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/eks
        run: |
          cd env/staging/eks
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/elasticache
        run: |
          cd env/staging/elasticache
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/rds
        run: |
          cd env/staging/rds
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/cloudfront
        run: |
          cd env/staging/cloudfront
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/lambda-api
        run: |
          cd env/staging/lambda-api
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/performance-test
        run: |
          cd env/staging/performance-test
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Apply aws/heartbeat
        run: |
          cd env/staging/heartbeat
          ../../../bin/terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Bump version and push tag
        if: github.event_name != 'workflow_dispatch' # We don't want to tag new versions when launched via workflow_dispatch since only environment variables changed
        uses: mathieudutour/github-tag-action@v4.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main

      - name: Slack message on failure
        if: ${{ failure() }}
        run: |
          json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: Terraform apply failed: <https://github.com/cds-snc/notification-terraform/actions/workflows/merge_to_main_staging.yml|Merge to main (Staging)>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.NOTIFY_DEV_SLACK_WEBHOOK }}          
